/* Generated By:JavaCC: Do not edit this line. CtrlC.java */
import java.io.*;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import Tables.SymbolTable;
public class CtrlC implements CtrlCConstants {

  public static void main(String [] args) throws TokenMgrError, ParseException
  {
    System.out.println("Digite o nome do arquivo:");
    Scanner scan = new Scanner(System.in);
    String path = System.getProperty("user.dir");
    path = path + "\u005c\u005c" + scan.next();
    try
    {
      CtrlC ctrlc = new CtrlC(new FileInputStream(path));
      ctrlc.iniciar();
    }
    catch (FileNotFoundException e)
    {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }

  static final public void iniciar() throws ParseException {
  Token t;
  List < SymbolTable > symbolTable = new ArrayList < SymbolTable > ();
  List < SymbolTable > keywordsTable = new ArrayList < SymbolTable > ();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUB:
      case MULT:
      case DIV:
      case MOD:
      case PARENTHESESO:
      case PARENTHESESC:
      case CHAVESA:
      case CHAVESF:
      case PONTOVIR:
      case ATRIBUICAO:
      case AND:
      case OR:
      case EQUAL:
      case DIFFERENT:
      case MAIOR:
      case MENOR:
      case MAIORIGUAL:
      case MENORIGUAL:
      case ATRIBUISOMA:
      case ATRIBUISUB:
      case INC:
      case DEC:
      case MAIN:
      case IF:
      case ELSE:
      case INT:
      case FLOAT:
      case DOUBLE:
      case CHAR:
      case PRINT:
      case FOR:
      case WHILE:
      case VOID:
      case RETURN:
      case NUM:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIN:
        jj_consume_token(MAIN);
      System.out.println("Palavra reservada main");
      keywordsTable.add(new SymbolTable("Main", "MAIN", "Palavra Reservada", "None"));
        break;
      case IF:
        jj_consume_token(IF);
      System.out.println("Palavra reservada if");
      keywordsTable.add(new SymbolTable("If", "IF", "Palavra Reservada", "None"));
        break;
      case ELSE:
        jj_consume_token(ELSE);
      System.out.println("Palavra reservada else");
      keywordsTable.add(new SymbolTable("Else", "ELSE", "Palavra Reservada", "None"));
        break;
      case INT:
        jj_consume_token(INT);
      System.out.println("Palavra reservada int");
      keywordsTable.add(new SymbolTable("Int", "INT", "Palavra Reservada", "None"));
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
      System.out.println("Palavra reservada float");
      keywordsTable.add(new SymbolTable("Float", "FLOAT", "Palavra Reservada", "None"));
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
      System.out.println("Palavra reservada double");
      keywordsTable.add(new SymbolTable("Double", "DOUBLE", "Palavra Reservada", "None"));
        break;
      case CHAR:
        jj_consume_token(CHAR);
      System.out.println("Palavra reservada char");
      keywordsTable.add(new SymbolTable("Char", "CHAR", "Palavra Reservada", "None"));
        break;
      case PRINT:
        jj_consume_token(PRINT);
      System.out.println("Palavra reservada print");
      keywordsTable.add(new SymbolTable("Print", "PRINT", "Palavra Reservada", "None"));
        break;
      case FOR:
        jj_consume_token(FOR);
      System.out.println("Palavra reservada for");
      keywordsTable.add(new SymbolTable("For", "FOR", "Palavra Reservada", "None"));
        break;
      case WHILE:
        jj_consume_token(WHILE);
      System.out.println("Palavra reservada while");
      keywordsTable.add(new SymbolTable("While", "WHILE", "Palavra Reservada", "None"));
        break;
      case VOID:
        jj_consume_token(VOID);
      System.out.println("Palavra reservada void");
      keywordsTable.add(new SymbolTable("Void", "VOID", "Palavra Reservada", "None"));
        break;
      case RETURN:
        jj_consume_token(RETURN);
      System.out.println("Palavra reservada return");
      keywordsTable.add(new SymbolTable("Return", "RETURN", "Palavra Reservada", "None"));
        break;
      case SOMA:
        jj_consume_token(SOMA);
      System.out.println("Operador +");
      symbolTable.add(new SymbolTable("+", "SOMA", "Operador", "None"));
        break;
      case SUB:
        jj_consume_token(SUB);
      System.out.println("Operador -");
      symbolTable.add(new SymbolTable("-", "SUB", "Operador", "None"));
        break;
      case DIV:
        jj_consume_token(DIV);
      System.out.println("Operador /");
      symbolTable.add(new SymbolTable("/", "DIV", "Operador", "None"));
        break;
      case MULT:
        jj_consume_token(MULT);
      System.out.println("Operador *");
      symbolTable.add(new SymbolTable("*", "MULT", "Operador", "None"));
        break;
      case MOD:
        jj_consume_token(MOD);
      System.out.println("Operador %");
      symbolTable.add(new SymbolTable("%", "MOD", "Operador", "None"));
        break;
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
      System.out.println("Operador =");
      symbolTable.add(new SymbolTable("=", "ATRIBUICAO", "Operador", "None"));
        break;
      case AND:
        jj_consume_token(AND);
      System.out.println("Operador AND(&&)");
      symbolTable.add(new SymbolTable("&&", "AND", "Operador", "None"));
        break;
      case OR:
        jj_consume_token(OR);
      System.out.println("Operador OR(||)");
      symbolTable.add(new SymbolTable("||", "OR", "Operador", "None"));
        break;
      case EQUAL:
        jj_consume_token(EQUAL);
      System.out.println("Operador IGUAL(==)");
      symbolTable.add(new SymbolTable("==", "EQUAL", "Operador", "None"));
        break;
      case DIFFERENT:
        jj_consume_token(DIFFERENT);
      System.out.println("Operador DIFERENTE(!=)");
      symbolTable.add(new SymbolTable("!=", "DIFFERENT", "Operador", "None"));
        break;
      case MAIOR:
        jj_consume_token(MAIOR);
      System.out.println("Operador >");
      symbolTable.add(new SymbolTable(" >", "MAIOR", "Operador", "None"));
        break;
      case MENOR:
        jj_consume_token(MENOR);
      System.out.println("Operador <");
      symbolTable.add(new SymbolTable("<", "MENOR", "Operador", "None"));
        break;
      case MAIORIGUAL:
        jj_consume_token(MAIORIGUAL);
      System.out.println("Operador >=");
      symbolTable.add(new SymbolTable(" >=", "MAIORIGUAL", "Operador", "None"));
        break;
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
      System.out.println("Operador <=");
      symbolTable.add(new SymbolTable("< =", "MENORIGUAL", "Operador", "None"));
        break;
      case ATRIBUISOMA:
        jj_consume_token(ATRIBUISOMA);
      System.out.println("Operador +=");
      symbolTable.add(new SymbolTable("+=", "ATRIBUISOMA", "Operador", "None"));
        break;
      case ATRIBUISUB:
        jj_consume_token(ATRIBUISUB);
      System.out.println("Operador -=");
      symbolTable.add(new SymbolTable("-=", "ATRIBUISUB", "Operador", "None"));
        break;
      case INC:
        jj_consume_token(INC);
      System.out.println("Operador INC(++)");
      symbolTable.add(new SymbolTable("++", "INC", "Operador", "None"));
        break;
      case DEC:
        jj_consume_token(DEC);
      System.out.println("Operador DEC(--)");
      symbolTable.add(new SymbolTable("--", "DEC", "Operador", "None"));
        break;
      case PARENTHESESO:
        jj_consume_token(PARENTHESESO);
      System.out.println("Abre parenteses (");
      symbolTable.add(new SymbolTable("(", "PARENTHESESO", "Operador", "None"));
        break;
      case PARENTHESESC:
        jj_consume_token(PARENTHESESC);
      System.out.println("Fecha parenteses )");
      symbolTable.add(new SymbolTable(")", "PARENTHESESC", "Operador", "None"));
        break;
      case CHAVESA:
        jj_consume_token(CHAVESA);
      System.out.println("Abre chaves {");
      symbolTable.add(new SymbolTable("{", "CHAVESA", "Operador", "None"));
        break;
      case CHAVESF:
        jj_consume_token(CHAVESF);
      System.out.println("Fecha chaves }");
      symbolTable.add(new SymbolTable("}", "CHAVESF", "Operador", "None"));
        break;
      case PONTOVIR:
        jj_consume_token(PONTOVIR);
      System.out.println("Ponto e virgula ;");
      symbolTable.add(new SymbolTable(";", "PONTOVIR", "Operador", "None"));
        break;
      case ID:
        t = jj_consume_token(ID);
      System.out.println("Achei uma palavra:" + t.image);
      symbolTable.add(new SymbolTable(t.image, "ID", "Identificador", "Identificador"));
        break;
      case NUM:
        t = jj_consume_token(NUM);
      System.out.println("Achei um numero:" + t.image);
      symbolTable.add(new SymbolTable(t.image, "NUM", "Constante", "Numero"));
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
    System.out.println();
    System.out.println("Symbol Table:");
    for(SymbolTable token : symbolTable) {
                System.out.println("Symbol: " + token.symbol + "\u0009\u0009Token: " + token.Tok + "\u0009\u0009Category: " + token.categoria + "\u0009\u0009Type: " + token.type);
    }

    System.out.println();
    System.out.println("Keywords Table:");
    for(SymbolTable token : keywordsTable) {
                System.out.println("Word: " + token.symbol + "\u0009\u0009Token: " + token.Tok + "\u0009\u0009Category: " + token.categoria + "\u0009\u0009Type: " + token.type);
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CtrlCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffc0,0xffffffc0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7ff,0x7ff,};
   }

  /** Constructor with InputStream. */
  public CtrlC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CtrlC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CtrlCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CtrlC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CtrlCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CtrlC(CtrlCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CtrlCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
