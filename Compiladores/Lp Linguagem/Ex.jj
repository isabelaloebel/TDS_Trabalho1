PARSER_BEGIN(LP)
import java.io.*;

public class LP implements ExTreeConstants{
  protected static JJTExState jjtree = new JJTExState();

    public static void main(String[] args) throws ParseException, IOException{
      Ex lex = new Ex(new FileInputStream(args[0]));
      try{
          SimpleNode node = lex.Ex();
          node.dump("");
      } catch (Exception e){
          e.printStackTrace();
      }
    }
}
PARSER_END(LP)

/*Regras para o analisador léxico. */

//Leituras à serem ignoradas.
SKIP : {
    " "
| 	"\n"
| 	"\t"
| 	"\r\n"
| 	"\r"
}

/*
    Tokens gerais da linguagem, incluem: palavras reservadas, operadores e delimitadores
 */
TOKEN : {
    <MAIN: "main">
|   <APARENTESES: "(">
|   <FPARENTESES: ")">
|   <ACHAVES: "{">
|   <FCHAVES: "}">
|   <INT: "int">
|   <FLOAT: "float">
|   <CHAR: "char">
|   <VOID: "void">
|   <PVIRGULA: ";">
|   <SOMA: "+">
|   <SUBTRACAO: "-">
|   <DIVISAO: "/">
|   <MULTIPLICACAO: "*">
|   <ATRIBUICAO: "=">
|   <PRINT: "print">
|   <FOR: "for">
|   <WHILE: "while">
|   <IF: "if">
|   <ELSE: "else">
|   <RETURN: "return">
|   <IGUALDADE: "==">
|   <DIFERENTE: "!=">
|   <MAIOR: ">">
|   <MENOR: "<">
|   <MAIORIGUAL: ">=">
|   <MENORIGUAL: "<=">
|   <VIRGULA: ",">
|   <ATRIBUICAOSOMA: "+=">
|   <ATRIBUICAOSUBTRACAO: "-=">
|   <INC: "++">
|   <DEC: "--">
}


/*
    Tokens para reconhecimento de identificadores e numeros
 */
TOKEN : {
    <ID: ["a"-"z", "A"-"Z"] (["a"-"z","A"-"Z","0"-"9","_"])*>
|   <NUM: (["0"-"9"])+(["."](["0"-"9"])+)?>
}

/*
    Regra inicial da gram\u00c3\u00a1tica.
*/
SimpleNode LP()       :
{
 SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 Token t;}
{
    try {
    <INT> <MAIN> <APARENTESES> <FPARENTESES> <ACHAVES> Comandos() Return() <FCHAVES>
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
    {return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
}

/*
    Regra que verifica um token de comparacao 
*/
void Compare()                  :
{
  SimpleNode jjtn000 = new SimpleNode(JJTTOKENCOMPARADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {

    (<IGUALDADE>) |
    (<DIFERENTE>) |
    (<MAIOR>) |
    (<MENOR>) |
    (<MAIORIGUAL>) |
    (<MENORIGUAL>)
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica o token de tipo da variável
*/
void Type()       :
{
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    (<INT>) |
    (<CHAR>) |
    (<FLOAT>)
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica todos os comandos válidos ou nenhum
*/
void Comandos()           :
{
  SimpleNode jjtn000 = new SimpleNode(JJTCOMANDOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    ((DeclaraVariavel() Comandos()) |
    (For() Comandos()) |
    (While() Comandos()) |
    (If() Comandos()) |
    (Print() Comandos()) |
    (Operacao()) Comandos())?
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica uma declaracao de variavel
*/
void DeclaraVariavel()      :
{
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    (Type() Id() Atribuicao() IdOrValue() <PVIRGULA>)
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica um identificador ou numero imediato
*/
void IdOrValue()            :
{
  SimpleNode jjtn000 = new SimpleNode(JJTIDORVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    (<ID>) |
    (<NUM>)
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica uma funcao for
*/
void For()      :
{
  SimpleNode jjtn000 = new SimpleNode(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <FOR> <APARENTESES> InputFor() <FPARENTESES> <ACHAVES> Comandos() <FCHAVES>
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica a estrutura de parametros de um for
*/
void InputFor()                :
{
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERSFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    InitiateFor() <PVIRGULA> EndFor() <PVIRGULA> Id() IterateFor()
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica os parametros de iniciacao de um for
*/
void InitiateFor()              :
{
  SimpleNode jjtn000 = new SimpleNode(JJTINITIATEFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    (Type() Id() Atribuicao() IdOrValue())?
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica os parametros de finalizacao de um for
*/
void EndFor()         :
{
  SimpleNode jjtn000 = new SimpleNode(JJTENDFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    (Id() Compare() IdOrValue())?
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica os parametros de iteracao de um for
*/
void IterateFor()             :
{
  SimpleNode jjtn000 = new SimpleNode(JJTITERATEFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    ((<ATRIBUICAOSOMA> IdOrValue()) |
    (<ATRIBUICAOSUBTRACAO> IdOrValue()) |
    (<INC>) |
    (<DEC>))?
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica a comparacao de dois numeros e/ou identificadores
*/
void CompareValue()               :
{
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPAREVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    IdOrValue() Compare() IdOrValue()
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica a estrutura de um while
*/
void While()        :
{
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <WHILE> <APARENTESES> CompareValue() <FPARENTESES> <ACHAVES> Comandos() <FCHAVES>
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica a estrutura de um if
 */
void If()     :
{
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <IF> <APARENTESES> CompareValue() <FPARENTESES> <ACHAVES> Comandos() <FCHAVES> Else()
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica a estrutura de um else, podendo ou nao ser ausente em um if
*/
void Else()       :
{
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    (<ELSE> <ACHAVES> Comandos() <FCHAVES>)?
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }

}

/*
    Regra que verifica a estrutura de um print
 */
void Print()        :
{
  SimpleNode jjtn000 = new SimpleNode(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <PRINT> <APARENTESES> Id() <FPARENTESES> <PVIRGULA>
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica a estrutura de um return
*/
void Return()         :
{
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <RETURN> IdOrValue() <PVIRGULA>
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica uma operacao de soma
*/
void Soma()       :
{
  SimpleNode jjtn000 = new SimpleNode(JJTSOMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <SOMA> IdOrValue() OperacaoRecursiva()
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica uma operacao de subtracao
*/
void Subtracao()            :
{
  SimpleNode jjtn000 = new SimpleNode(JJTSUBTRACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <SUBTRACAO> IdOrValue() OperacaoRecursiva()
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica uma operacao de multiplicacao
*/
void Multiplicacao()                :
{
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <MULTIPLICACAO> IdOrValue() OperacaoRecursiva()
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica uma operacao de divisao
*/
void Divisao()          :
{
  SimpleNode jjtn000 = new SimpleNode(JJTDIVISAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <DIVISAO> IdOrValue() OperacaoRecursiva()
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra para verificar operacoes recursivamente
*/
void OperacaoRecursiva()                    :
{
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAORECURSIVA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    (Divisao() | Soma() | Subtracao() | Multiplicacao())?
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra que verifica a estrutura de uma operacao
*/
void Operacao()           :
{
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    Id() Atribuicao() IdOrValue() (Soma() | Subtracao() | Divisao() | Multiplicacao())? <PVIRGULA>
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra auxiliar para verificar um ID *Somente para efeito de visualizacao na arvore sintatica*
*/
void Id()     :
{
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <ID>
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/*
    Regra auxiliar para verificar uma atribuicao *Somente para efeito de visualizacao na arvore sintatica*
*/
void Atribuicao()                  :
{
  SimpleNode jjtn000 = new SimpleNode(JJTTOKENATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
}
{
    try {
    <ATRIBUICAO>
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}