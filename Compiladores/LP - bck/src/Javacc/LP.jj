/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. LP.jj */
/*@egen*/PARSER_BEGIN(LP)
import java.io.*;
// import java.util.*;
// import java.util.ArrayList;

public class LP/*@bgen(jjtree)*/implements LPTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTLPState jjtree = new JJTLPState();

/*@egen*/
    public static void main(String[] args) throws ParseException, IOException{
    // System.out.println("Digite o nome do arquivo:");
    // Scanner scan = new Scanner(System.in);
    // String path = System.getProperty("user.dir");
    // path = path + "\\" + scan.next();
    
    LP lp = new LP(new FileInputStream(args[0]));
    try{
        SimpleNode node = lp.LP();
        node.dump("");
      } catch (Exception e){
          e.printStackTrace();
      }
    }
}
PARSER_END(LP)

/*
    Caracteres a serem ignorados pelo analisador
 */
SKIP : {
    " "
|   "\n"
|   "\t"
|   "\r\n"
|   "\r"
}

/*
    Tokens gerais da linguagem, incluem: palavras reservadas, operadores e delimitadores
 */
TOKEN : {
    <MAIN: "main">
|   <APARENTESES: "(">
|   <FPARENTESES: ")">
|   <ACHAVES: "{">
|   <FCHAVES: "}">
|   <INT: "int">
|   <FLOAT: "float">
|   <CHAR: "char">
|   <VOID: "void">
|   <PVIRGULA: ";">
|   <SOMA: "+">
|   <SUBTRACAO: "-">
|   <DIVISAO: "/">
|   <MULTIPLICACAO: "*">
|   <ATRIBUICAO: "=">
|   <PRINT: "print">
|   <FOR: "for">
|   <WHILE: "while">
|   <IF: "if">
|   <ELSE: "else">
|   <RETURN: "return">
|   <IGUALDADE: "==">
|   <DIFERENTE: "!=">
|   <MAIOR: ">">
|   <MENOR: "<">
|   <MAIORIGUAL: ">=">
|   <MENORIGUAL: "<=">
|   <VIRGULA: ",">
|   <ATRIBUICAOSOMA: "+=">
|   <ATRIBUICAOSUBTRACAO: "-=">
|   <INC: "++">
|   <DEC: "--">
}


/*
    Tokens para reconhecimento de identificadores e numeros
 */
TOKEN : {
    <ID: ["a"-"z", "A"-"Z"] (["a"-"z","A"-"Z","0"-"9","_"])*>
|   <NUM: (["0"-"9"])+(["."](["0"-"9"])+)?>
}

/*
    Regra inicial da gram\u00c3\u00a1tica.
*/
SimpleNode LP()       :
{/*@bgen(jjtree) MAIN */
 SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MAIN */
    try {
/*@egen*/
    <INT> <MAIN> <APARENTESES> <FPARENTESES> <ACHAVES> Comandos() Return() <FCHAVES>
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica um token de comparacao 
*/
void Compare()                  :
{/*@bgen(jjtree) TOKENCOMPARADOR */
  SimpleNode jjtn000 = new SimpleNode(JJTTOKENCOMPARADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TOKENCOMPARADOR */
    try {
/*@egen*/
    (<IGUALDADE>) |
    (<DIFERENTE>) |
    (<MAIOR>) |
    (<MENOR>) |
    (<MAIORIGUAL>) |
    (<MENORIGUAL>)/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica o token de tipo da variavel
*/
void Type()       :
{/*@bgen(jjtree) TYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TYPE */
    try {
/*@egen*/
    (<INT>) |
    (<CHAR>) |
    (<FLOAT>)/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica todos os comandos validos ou nenhum
*/
void Comandos()           :
{/*@bgen(jjtree) COMANDOS */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMANDOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COMANDOS */
    try {
/*@egen*/
    ((DeclaraVariavel() Comandos()) |
    (For() Comandos()) |
    (While() Comandos()) |
    (If() Comandos()) |
    (Print() Comandos()) |
    (Operacao()) Comandos())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica uma declaracao de variavel
*/
void DeclaraVariavel()      :
{/*@bgen(jjtree) VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VAR */
    try {
/*@egen*/
    (Type() Id() Atribuicao() IdOrValue() <PVIRGULA>)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica um identificador ou numero imediato
*/
void IdOrValue()            :
{/*@bgen(jjtree) IDORVALUE */
  SimpleNode jjtn000 = new SimpleNode(JJTIDORVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IDORVALUE */
    try {
/*@egen*/
    (<ID>) |
    (<NUM>)/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica uma funcao for
*/
void For()      :
{/*@bgen(jjtree) FOR */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FOR */
    try {
/*@egen*/
    <FOR> <APARENTESES> InputFor() <FPARENTESES> <ACHAVES> Comandos() <FCHAVES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica a estrutura de parametros de um for
*/
void InputFor()                :
{/*@bgen(jjtree) PARAMETERSFOR */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERSFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PARAMETERSFOR */
    try {
/*@egen*/
    InitiateFor() <PVIRGULA> EndFor() <PVIRGULA> Id() IterateFor()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica os parametros de iniciacao de um for
*/
void InitiateFor()              :
{/*@bgen(jjtree) INITIATEFOR */
  SimpleNode jjtn000 = new SimpleNode(JJTINITIATEFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) INITIATEFOR */
    try {
/*@egen*/
    (Type() Id() Atribuicao() IdOrValue())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica os parametros de finalizacao de um for
*/
void EndFor()         :
{/*@bgen(jjtree) ENDFOR */
  SimpleNode jjtn000 = new SimpleNode(JJTENDFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ENDFOR */
    try {
/*@egen*/
    (Id() Compare() IdOrValue())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica os parametros de iteracao de um for
*/
void IterateFor()             :
{/*@bgen(jjtree) ITERATEFOR */
  SimpleNode jjtn000 = new SimpleNode(JJTITERATEFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ITERATEFOR */
    try {
/*@egen*/
    ((<ATRIBUICAOSOMA> IdOrValue()) |
    (<ATRIBUICAOSUBTRACAO> IdOrValue()) |
    (<INC>) |
    (<DEC>))?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica a comparacao de dois numeros e/ou identificadores
*/
void CompareValue()               :
{/*@bgen(jjtree) COMPAREVALUE */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPAREVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COMPAREVALUE */
    try {
/*@egen*/
    IdOrValue() Compare() IdOrValue()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica a estrutura de um while
*/
void While()        :
{/*@bgen(jjtree) WHILE */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WHILE */
    try {
/*@egen*/
    <WHILE> <APARENTESES> CompareValue() <FPARENTESES> <ACHAVES> Comandos() <FCHAVES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica a estrutura de um if
 */
void If()     :
{/*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IF */
    try {
/*@egen*/
    <IF> <APARENTESES> CompareValue() <FPARENTESES> <ACHAVES> Comandos() <FCHAVES> Else()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica a estrutura de um else, podendo ou nao ser ausente em um if
*/
void Else()       :
{/*@bgen(jjtree) ELSE */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ELSE */
    try {
/*@egen*/
    (<ELSE> <ACHAVES> Comandos() <FCHAVES>)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica a estrutura de um print
 */
void Print()        :
{/*@bgen(jjtree) PRINT */
  SimpleNode jjtn000 = new SimpleNode(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PRINT */
    try {
/*@egen*/
    <PRINT> <APARENTESES> Id() <FPARENTESES> <PVIRGULA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica a estrutura de um return
*/
void Return()         :
{/*@bgen(jjtree) RETURN */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RETURN */
    try {
/*@egen*/
    <RETURN> IdOrValue() <PVIRGULA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica uma operacao de soma
*/
void Soma()       :
{/*@bgen(jjtree) SOMA */
  SimpleNode jjtn000 = new SimpleNode(JJTSOMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SOMA */
    try {
/*@egen*/
    <SOMA> IdOrValue() OperacaoRecursiva()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica uma operacao de subtracao
*/
void Subtracao()            :
{/*@bgen(jjtree) SUBTRACAO */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBTRACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SUBTRACAO */
    try {
/*@egen*/
    <SUBTRACAO> IdOrValue() OperacaoRecursiva()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica uma operacao de multiplicacao
*/
void Multiplicacao()                :
{/*@bgen(jjtree) MULTIPLICACAO */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MULTIPLICACAO */
    try {
/*@egen*/
    <MULTIPLICACAO> IdOrValue() OperacaoRecursiva()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica uma operacao de divisao
*/
void Divisao()          :
{/*@bgen(jjtree) DIVISAO */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVISAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DIVISAO */
    try {
/*@egen*/
    <DIVISAO> IdOrValue() OperacaoRecursiva()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra para verificar operacoes recursivamente
*/
void OperacaoRecursiva()                    :
{/*@bgen(jjtree) OPERACAORECURSIVA */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAORECURSIVA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OPERACAORECURSIVA */
    try {
/*@egen*/
    (Divisao() | Soma() | Subtracao() | Multiplicacao())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra que verifica a estrutura de uma operacao
*/
void Operacao()           :
{/*@bgen(jjtree) OPERACAO */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OPERACAO */
    try {
/*@egen*/
    Id() Atribuicao() IdOrValue() (Soma() | Subtracao() | Divisao() | Multiplicacao())? <PVIRGULA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra auxiliar para verificar um ID *Somente para efeito de visualizacao na arvore sintatica*
*/
void Id()     :
{/*@bgen(jjtree) ID */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ID */
    try {
/*@egen*/
    <ID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
    Regra auxiliar para verificar uma atribuicao *Somente para efeito de visualizacao na arvore sintatica*
*/
void Atribuicao()                  :
{/*@bgen(jjtree) TOKENATRIBUICAO */
  SimpleNode jjtn000 = new SimpleNode(JJTTOKENATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TOKENATRIBUICAO */
    try {
/*@egen*/
    <ATRIBUICAO>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
